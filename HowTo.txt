Before proceeding, get the following software:

 ISAT-CK7:          https://tcg.mae.cornell.edu/ISATCK7/
 ChemkinII 4.5      Citing Pope: I cannot assist the user in obtaining Chemkin II. 

Optional:
 For more functionality of ISAT-CK7, you can install ADIFOR (m_jac=1 in ci.nml)


Put the ISAT interface (my code) for OpenFOAM in ~/OpenFOAM/user/lib
cd ~/OpenFOAM/user/lib/ISAT
wmake

Enter ChemkinII source code directory: 

make
cp *.a YOUR_ISAT_DIR/ISAT_dependencies/lib
cd YOUR_ISAT_DIR/ISAT
make
cp lib/*.so $FOAM_USER_LIBBIN  (the so-files may also be symbolically linked, 'ln -s' )


For a case with reactingFoam use this in constant/chemistryProperties:

    chemistryType
    {
        chemistrySolver   ISAT;
        chemistryThermo   psi;
    }

    initialChemicalTimeStep 1e+15; //set high to let ISAT do the full time integration

    ISATCoeffs
    {
        saveISATtree on; // or off
        constantPressure off; // or on (for low Mach solver, ISAT operates more effectively)
        externalCKWYP off; // if you have put your own ckwyp_ext file in ISAT-CK7 source
    }

If ISAT tree is saved, isat_1.tab is created in each processor dir, or case dir
for serial runs. At restart, it is checked if the .tab file exists. If it does
it is loaded by ISAT-CK7. 

You need to produce the file chem.bin and put it in the case directory
In your case dir:
cd chemkin
CHEMKIN_COMPILE_DIR/ckinterp
mv chem.bin ..

ckinterp assumes there are two files present: chem.inp and therm.dat to produce chem.bin

Please make sure your solver also uses the chemistryReader chemkinReader:

thermoPhysicalProperties:
    CHEMKINFile     "$FOAM_CASE/chemkin/chem.inp";
    CHEMKINThermoFile "$FOAM_CASE/chemkin/therm.dat";

Such that OpenFOAM and ISAT use the same species, and also use them in the same
order. Further, this guarantees that the same thermodynamical data is used by both
OpenFOAM and ISAT/Chemkin. You should be able to use native foam thermo-input too, as 
long as you have the same order of your species in the code during run-time.

Further you need a ISAT file called "streams.in". See ISAT-CK7 code for info.
The file is needed by the ISAT code, but it is also used by my code to make an
initial call to ISAT, so assure that the first stream (the only stream needed)
is realistic, like pure N2 at STP.

If you fix time step (adjustTimeStep no;) ISAT can be operated more effectively

In controlDict you need:

libs
(
    "libISATChemistrySolver.so"
    "liblapack.so.3"
    "libadifor.so"
    "libisat7_ser.so"
    "libceq.so"
    "libck_ext.so"
    "libell.so"
    "libice_pic.so"
    "libisatab_ser.so"
    "libisatck_ext.so"
    "libisatck.so"
    "libisat_rnu.so"
    "libsell.so"
);

lapack may be optional, depending on how you compiled ISAT-CK7. In case it is needed, 
put a link, 'ln -s', or a copy in $FOAM_USER_LIBBIN. 

Note on FORTRAN compiler: I used gfortan for all FORTRAN code. Some tweaking with
ISAT-CK7's Makefile was needed. Name mangling may be different for other compiler,
which means that the ISAT-CK7's subroutine "ciconv" can be mangled into something
else than "ciconv_", as was the case with gfortran. If that is the case, change 
the names of the subroutines in both ISAT.H and ISAT.C accordingly.

Parallel runs:
The following files has to be in EACH processor dir:
chem.bin  ci.nml isat_1.nml  streams.in
The nml files are optional, and are used to control ISATCK7 (see ISATCK7 for help)
The files are conveniently created as symbolic links, i.e. in processor#, type
ln -s ../chem.bin chem.bin  # etc...


Experienced problem: 

2 step Westbrook & Dryer CH4 mechanism would not time-integrate with ISAT-CK7. Crash...

When using an inert specie in the simulation, like N2, which is not
solved using transport equation, I had some problems with N2 getting a bit off from expected
values. Look on reactingLMFoam at github.com/nogenmyr to see how inert specie may be turned off
(i.e. start solving transport equation also for N2). Without inert specie, total sum of Yi may
deviate from unity. The deviation on a test case was some 0.3%.
